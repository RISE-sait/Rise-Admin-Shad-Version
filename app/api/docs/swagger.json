{
  "schemes": [],
  "swagger": "2.0",
  "info": {
    "description": "",
    "title": "Rise API",
    "contact": {
      "email": "klintlee1@gmail.com"
    },
    "version": "1.0"
  },
  "host": "",
  "basePath": "",
  "paths": {
    "/ai/chat": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["ai"],
        "summary": "Proxy chat message to AI model",
        "parameters": [
          {
            "description": "Chat message",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.ChatRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/dto.ChatResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/athletes": {
      "get": {
        "description": "Retrieves a paginated list of athletes with profile details and stats.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["athletes"],
        "summary": "Get all athletes",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of athletes to retrieve (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of athletes to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/athlete.ResponseAthlete"
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/athletes/{athlete_id}/team": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["athletes"],
        "parameters": [
          {
            "type": "string",
            "description": "Athlete ID",
            "name": "athlete_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Athlete removed from team"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Athlete not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/athletes/{athlete_id}/team/{team_id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["athletes"],
        "parameters": [
          {
            "type": "string",
            "description": "Athlete ID",
            "name": "athlete_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Team ID",
            "name": "team_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Team updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Athlete or team not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/athletes/{id}/stats": {
      "patch": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["athletes"],
        "parameters": [
          {
            "type": "string",
            "description": "Athlete ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Customer stats update data",
            "name": "update_body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer.StatsUpdateRequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Customer stats updated successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid parameters",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/auth": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["authentication"],
        "parameters": [
          {
            "type": "string",
            "description": "Firebase token for user verification",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "schema": {
              "$ref": "#/definitions/identity.UserAuthenticationResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid Firebase token",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/auth/child/{id}": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Authenticates a user using Firebase token and returns a JWT token for the authenticated user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["authentication"],
        "summary": "Authenticate a user and return a JWT token",
        "parameters": [
          {
            "type": "string",
            "description": "Child ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User authenticated successfully",
            "schema": {
              "$ref": "#/definitions/identity.UserAuthenticationResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid Firebase token",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/bookings/upcoming": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": ["application/json"],
        "tags": ["bookings"],
        "responses": {
          "200": {
            "description": "Upcoming bookings",
            "schema": {
              "$ref": "#/definitions/booking.UpcomingBookingsResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/checkout/events/{id}": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["payments"],
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Event ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link generated successfully",
            "schema": {
              "$ref": "#/definitions/payment.CheckoutResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid input or missing event ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Event not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "409": {
            "description": "Conflict: Event is full or already booked",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to process checkout",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/checkout/membership_plans/{id}": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Generates a payment link for purchasing a membership plan.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["payments"],
        "parameters": [
          {
            "type": "string",
            "description": "Membership plan ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Discount code to apply",
            "name": "discount_code",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link generated successfully",
            "schema": {
              "$ref": "#/definitions/payment.CheckoutResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to process checkout",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/checkout/programs/{id}": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["payments"],
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Program ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link generated successfully",
            "schema": {
              "$ref": "#/definitions/payment.CheckoutResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to process checkout",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/contact": {
      "post": {
        "description": "Verifies reCAPTCHA, sanitizes input, and emails the contact form",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["contact"],
        "summary": "Send a contact request",
        "parameters": [
          {
            "description": "Contact form data",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.ContactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success message",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "validation or recaptcha error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "429": {
            "description": "rate limit exceeded",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "internal server error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/courts": {
      "get": {
        "description": "Retrieves all courts",
        "produces": ["application/json"],
        "tags": ["courts"],
        "summary": "List courts",
        "responses": {
          "200": {
            "description": "List of courts retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/court.ResponseDto"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates a new court for a location",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["courts"],
        "summary": "Create a court",
        "parameters": [
          {
            "description": "Court details",
            "name": "court",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/court.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Court created successfully",
            "schema": {
              "$ref": "#/definitions/court.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/courts/{id}": {
      "get": {
        "description": "Retrieves a single court using its UUID",
        "produces": ["application/json"],
        "tags": ["courts"],
        "summary": "Get a court by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Court ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Court retrieved successfully",
            "schema": {
              "$ref": "#/definitions/court.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Court not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates a court's details",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["courts"],
        "summary": "Update a court",
        "parameters": [
          {
            "type": "string",
            "description": "Court ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated court details",
            "name": "court",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/court.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Court updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Court not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes a court by its ID",
        "produces": ["application/json"],
        "tags": ["courts"],
        "summary": "Delete a court",
        "parameters": [
          {
            "type": "string",
            "description": "Court ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Court deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Court not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/customers": {
      "get": {
        "description": "Retrieves a list of customers, optionally filtered by fields like parent ID, name, email, phone, and ID, with pagination support.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "summary": "Get customers",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of customers to retrieve (default: 20, max: 20)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of customers to skip (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search term to filter customers",
            "name": "search",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Parent ID to filter customers (example: 123e4567-e89b-12d3-a456-426614174000)",
            "name": "parent_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of customers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer.Response"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid parameters"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/customers/archived": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "parameters": [
          {
            "type": "integer",
            "description": "Number of customers to retrieve (default: 20, max: 20)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of customers to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of archived customers",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer.Response"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/customers/checkin/{id}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Membership info",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/customers/email/{email}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "parameters": [
          {
            "type": "string",
            "description": "Customer Email",
            "name": "email",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The customer",
            "schema": {
              "$ref": "#/definitions/customer.Response"
            }
          },
          "400": {
            "description": "Bad Request: Invalid parameters"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/customers/id/{id}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The customer",
            "schema": {
              "$ref": "#/definitions/customer.Response"
            }
          },
          "400": {
            "description": "Bad Request: Invalid parameters"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/customers/{id}/archive": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Customer archived"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/customers/{id}/memberships": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Membership history",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer.MembershipHistoryResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/customers/{id}/unarchive": {
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "parameters": [
          {
            "type": "string",
            "description": "Customer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Customer unarchived"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/events": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "type": "string",
            "format": "date",
            "example": "\"2025-03-01\"",
            "description": "Start date of the events range (YYYY-MM-DD)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date",
            "example": "\"2025-03-31\"",
            "description": "End date of the events range (YYYY-MM-DD)",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Convenience month filter in YYYY-MM format",
            "name": "month",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Convenience day filter in YYYY-MM-DD format",
            "name": "day",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
            "description": "Filter by program ID",
            "name": "program_id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
            "description": "Filter by participant ID",
            "name": "participant_id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
            "description": "Filter by team ID",
            "name": "team_id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
            "description": "Filter by location ID",
            "name": "location_id",
            "in": "query"
          },
          {
            "enum": [
              "practice",
              "course",
              "game",
              "other",
              "others",
              "tournament",
              "event",
              "tryouts"
            ],
            "type": "string",
            "example": "practice",
            "description": "Filter by program type",
            "name": "program_type",
            "in": "query"
          },
          {
            "enum": ["date", "day"],
            "type": "string",
            "default": "date",
            "example": "date",
            "description": "Response format type",
            "name": "response_type",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
            "description": "ID of person who created the event",
            "name": "created_by",
            "in": "query"
          },
          {
            "type": "string",
            "format": "uuid",
            "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
            "description": "ID of person who updated the event",
            "name": "updated_by",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "example": 10,
            "description": "Number of items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "example": 20,
            "description": "Number of items to skip (for pagination)",
            "name": "offset",
            "in": "query"
          },
          {
            "minimum": 1,
            "type": "integer",
            "example": 2,
            "description": "Page number (alternative to offset)",
            "name": "page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of events with pagination metadata",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input format or missing required parameters",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "description": "Array of Event IDs to delete",
            "name": "ids",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/event.DeleteRequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Events deleted successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: One or more events not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/events/one-time": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "description": "Event details",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/event.EventRequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event created successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/events/recurring": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "description": "Event details",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/event.RecurrenceRequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Event created successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/events/recurring/{id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "description": "Update events details",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/event.RecurrenceRequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Events updated successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Events not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "type": "string",
            "description": "Recurrence ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Events deleted successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Events not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/events/{event_id}/staffs/{staff_id}": {
      "post": {
        "description": "Assign a staff member to an event using event_id and staff_id in the request body.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["event_staff"],
        "summary": "Assign a staff member to an event",
        "parameters": [
          {
            "type": "string",
            "description": "Event ID",
            "name": "event_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Staff ID",
            "name": "staff_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Staff successfully assigned to event",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "description": "Remove a staff member from an event using event_id and staff_id in the request body.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["event_staff"],
        "summary": "Unassign a staff member from an event",
        "parameters": [
          {
            "type": "string",
            "description": "Event ID",
            "name": "event_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Staff ID",
            "name": "staff_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Staff successfully unassigned from event",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "Event ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Event details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/event.EventResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Event not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["events"],
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000",
            "description": "Event ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated event details",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/event.EventRequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Event updated successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Event not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/games": {
      "get": {
        "description": "Retrieves a list of games with optional time-based filtering.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["games"],
        "summary": "List games (all, upcoming, or past)",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by time: upcoming or past",
            "name": "filter",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of games",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/game.ResponseDto"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates a new game entry in the system.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["games"],
        "summary": "Create a new game",
        "parameters": [
          {
            "description": "Game details",
            "name": "game",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/game.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Game created successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/games/{id}": {
      "get": {
        "description": "Retrieves a single game using its UUID.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["games"],
        "summary": "Get game by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Game ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Game retrieved successfully",
            "schema": {
              "$ref": "#/definitions/game.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Game not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates a game by its ID.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["games"],
        "summary": "Update a game",
        "parameters": [
          {
            "type": "string",
            "description": "Game ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated game details",
            "name": "game",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/game.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Game updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Game not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes a game by its ID.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["games"],
        "summary": "Delete a game",
        "parameters": [
          {
            "type": "string",
            "description": "Game ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Game deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Game not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/haircuts": {
      "get": {
        "description": "Retrieves all haircut images from a folder in Google Cloud Storage. Optionally, specify a barber name to get images from that barber's folder.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "parameters": [
          {
            "type": "string",
            "description": "Barber ID to filter images",
            "name": "barber_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of image URLs",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Uploads a haircut image to Google Cloud Storage and returns the object URL.",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "parameters": [
          {
            "type": "file",
            "description": "Haircut image to upload",
            "name": "file",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/haircuts/events": {
      "get": {
        "description": "Retrieve all haircut events, with optional filters by barber ID and customer ID.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "summary": "Get all haircut events",
        "parameters": [
          {
            "type": "string",
            "example": "\"2025-03-01\"",
            "description": "Start date of the events range (YYYY-MM-DD)",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "example": "\"2025-03-31\"",
            "description": "End date of the events range (YYYY-MM-DD)",
            "name": "before",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by barber ID",
            "name": "barber_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by customer ID",
            "name": "customer_id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of haircut events retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/haircut_event.EventResponseDto"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Registers a new haircut event with the provided details from request body.\nRequires an Authorization header containing the customer's JWT, ensuring only logged-in customers can make the request.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "parameters": [
          {
            "description": "Haircut event details",
            "name": "event",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/haircut_event.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Haircut event created successfully",
            "schema": {
              "$ref": "#/definitions/haircut_event.EventResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/haircuts/events/{id}": {
      "get": {
        "description": "Retrieves details of a specific haircut event based on its ID.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "parameters": [
          {
            "type": "string",
            "description": "Haircut event ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Haircut event details retrieved successfully",
            "schema": {
              "$ref": "#/definitions/haircut_event.EventResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Haircut event not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a haircut event by its ID.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "parameters": [
          {
            "type": "string",
            "description": "Haircut event ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Haircut event deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Haircut event not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/haircuts/services": {
      "get": {
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/haircut_service.BarberServiceResponseDto"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "parameters": [
          {
            "description": "Create Barber Service Request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/haircut_service.CreateBarberServiceRequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/haircuts/services/{id}": {
      "delete": {
        "produces": ["application/json"],
        "tags": ["haircuts"],
        "parameters": [
          {
            "type": "string",
            "description": "Barber Service ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Updated successfully"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/locations": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["locations"],
        "responses": {
          "200": {
            "description": "List of locations retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/location.ResponseDto"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["locations"],
        "parameters": [
          {
            "description": "Location details",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/location.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Location created successfully",
            "schema": {
              "$ref": "#/definitions/location.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/locations/{id}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["locations"],
        "parameters": [
          {
            "type": "string",
            "description": "Location UUID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Location retrieved successfully",
            "schema": {
              "$ref": "#/definitions/location.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid UUID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Location not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["locations"],
        "parameters": [
          {
            "type": "string",
            "description": "Location UUID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated Location details",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/location.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Location updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Location not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["locations"],
        "parameters": [
          {
            "type": "string",
            "description": "Location UUID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Location deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid UUID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Location not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/memberships": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["memberships"],
        "responses": {
          "200": {
            "description": "GetMemberships of memberships retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/membership.Response"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["memberships"],
        "parameters": [
          {
            "description": "Membership details",
            "name": "membership",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/membership.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Membership created successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/memberships/plans": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["membership-plans"],
        "parameters": [
          {
            "description": "Membership plan details",
            "name": "plan",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/membership_plan.PlanRequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Membership plan created successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/memberships/plans/{id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["membership-plans"],
        "parameters": [
          {
            "type": "string",
            "description": "Plan ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Membership plan details",
            "name": "plan",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/membership_plan.PlanRequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Membership plan updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Membership plan not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["membership-plans"],
        "parameters": [
          {
            "type": "string",
            "description": "Plan ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Membership plan deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Membership plan not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/memberships/{id}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["memberships"],
        "parameters": [
          {
            "type": "string",
            "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
            "description": "Membership ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Membership retrieved successfully",
            "schema": {
              "$ref": "#/definitions/membership.Response"
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Membership not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["memberships"],
        "parameters": [
          {
            "type": "string",
            "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
            "description": "Membership ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Membership details",
            "name": "membership",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/membership.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Membership updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Membership not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["memberships"],
        "parameters": [
          {
            "type": "string",
            "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
            "description": "Membership ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Membership deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Membership not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/memberships/{id}/plans": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["membership-plans"],
        "parameters": [
          {
            "type": "string",
            "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
            "description": "Membership ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GetMemberships of membership plans retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/membership_plan.PlanResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid membership ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Membership plans not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/newsletter": {
      "post": {
        "description": "Adds or updates a contact with a HubSpot newsletter tag",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["newsletter"],
        "summary": "Subscribe to newsletter",
        "parameters": [
          {
            "description": "Email and tag",
            "name": "payload",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/dto.NewsletterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscription confirmation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Validation error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/playground/systems": {
      "get": {
        "produces": ["application/json"],
        "tags": ["playground-systems"],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api_internal_domains_playground_dto_system.ResponseDto"
              }
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["playground-systems"],
        "parameters": [
          {
            "description": "System details",
            "name": "system",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_internal_domains_playground_dto_system.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/api_internal_domains_playground_dto_system.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/playground/systems/{id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["playground-systems"],
        "parameters": [
          {
            "type": "string",
            "description": "System ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "System details",
            "name": "system",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api_internal_domains_playground_dto_system.RequestDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api_internal_domains_playground_dto_system.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": ["playground-systems"],
        "parameters": [
          {
            "type": "string",
            "description": "System ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/practices": {
      "get": {
        "description": "Retrieves a list of practices, optionally filtered by team.",
        "produces": ["application/json"],
        "tags": ["practices"],
        "summary": "List practices",
        "parameters": [
          {
            "type": "string",
            "description": "Team UUID",
            "name": "team_id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Items per page (max 100)",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of practices",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/practice.ResponseDto"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates a new practice session.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["practices"],
        "summary": "Create a practice",
        "parameters": [
          {
            "description": "Practice details",
            "name": "practice",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/practice.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Practice created successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/practices/recurring": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Creates multiple recurring practices using recurrence rules.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["practices"],
        "summary": "Create recurring practices",
        "parameters": [
          {
            "description": "Recurring practice details",
            "name": "recurrence",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/practice.RecurrenceRequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Recurring practices created"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/practices/{id}": {
      "get": {
        "description": "Fetches a single practice session using its UUID.",
        "produces": ["application/json"],
        "tags": ["practices"],
        "summary": "Get a practice by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Practice ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Practice retrieved",
            "schema": {
              "$ref": "#/definitions/practice.ResponseDto"
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Practice not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Updates the details of a specific practice.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["practices"],
        "summary": "Update a practice",
        "parameters": [
          {
            "type": "string",
            "description": "Practice ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated practice details",
            "name": "practice",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/practice.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Practice updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Practice not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes a specific practice session.",
        "produces": ["application/json"],
        "tags": ["practices"],
        "summary": "Delete a practice",
        "parameters": [
          {
            "type": "string",
            "description": "Practice ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Practice deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Practice not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/programs": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["programs"],
        "parameters": [
          {
            "type": "string",
            "description": "Program Type (practice, course, game, other, others, tournament, event, tryouts)",
            "name": "type",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Programs retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/program.Response"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["programs"],
        "parameters": [
          {
            "description": "Program details",
            "name": "program",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/program.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Program created successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/programs/levels": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["programs"],
        "responses": {
          "200": {
            "description": "Get program levels retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/program.LevelsResponse"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/programs/{id}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["programs"],
        "parameters": [
          {
            "type": "string",
            "description": "Program ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Programs retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/program.Response"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Program not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["programs"],
        "parameters": [
          {
            "type": "string",
            "description": "Program ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Program details",
            "name": "program",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/program.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Program updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Program not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["programs"],
        "parameters": [
          {
            "type": "string",
            "description": "Program ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Program deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Program not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/register/athlete": {
      "post": {
        "description": "Registers a new athlete by verifying the Firebase token and creating an account based on the provided details.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["registration"],
        "summary": "Register a new athlete",
        "parameters": [
          {
            "description": "Athlete registration details",
            "name": "athlete",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer.AthleteRegistrationRequestDto"
            }
          },
          {
            "type": "string",
            "description": "Firebase token for user verification",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Athlete registered successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Missing or invalid Firebase token or request body",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to register athlete",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/register/child": {
      "post": {
        "description": "Registers a new child account using the provided details and associates it with the parent based on the Firebase authentication token.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["registration"],
        "summary": "Register a new child account and associate it with the parent",
        "parameters": [
          {
            "description": "Child account registration details",
            "name": "customer",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer.ChildRegistrationRequestDto"
            }
          },
          {
            "type": "string",
            "description": "Firebase token for user verification",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Child account registered successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input or missing Firebase token",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "401": {
            "description": "Unauthorized: Invalid Firebase token or insufficient permissions",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to register child account or associate with parent",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/register/parent": {
      "post": {
        "description": "Registers a new parent by verifying the Firebase token and creating an account based on the provided details.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["registration"],
        "summary": "Register a new parent",
        "parameters": [
          {
            "description": "Parent registration details",
            "name": "parent",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer.ParentRegistrationRequestDto"
            }
          },
          {
            "type": "string",
            "description": "Firebase token for user verification",
            "name": "Authorization",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "Parent registered successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Missing or invalid Firebase token or request body",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to register parent",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/register/staff": {
      "post": {
        "description": "Creates a new staff account in the system using the provided registration details.",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["registration"],
        "summary": "Register a new staff member",
        "parameters": [
          {
            "type": "string",
            "description": "Firebase token for user verification",
            "name": "Authorization",
            "in": "header",
            "required": true
          },
          {
            "description": "Staff registration details",
            "name": "staff",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/staff.RegistrationRequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Staff registered successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "401": {
            "description": "Unauthorized: Invalid or missing authentication token",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to register staff",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/register/staff/approve/{id}": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Approves a pending staff member's account in the system",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["registration"],
        "summary": "Approve a pending staff member",
        "parameters": [
          {
            "type": "string",
            "description": "ID of staff member to approve",
            "name": "staff_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Staff approved successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "401": {
            "description": "Unauthorized: Invalid or missing authentication token",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "403": {
            "description": "Forbidden: User does not have admin privileges",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Staff member not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to approve staff",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/register/staff/pending": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": ["application/json"],
        "tags": ["registration"],
        "summary": "Get pending staff member details",
        "responses": {
          "200": {
            "description": "Pending staff member details",
            "schema": {
              "$ref": "#/definitions/staff.PendingStaffResponseDto"
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to retrieve pending staff",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/secure/customers/memberships": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["customers"],
        "responses": {
          "200": {
            "description": "Membership history",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/customer.MembershipHistoryResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/secure/events": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": ["application/json"],
        "tags": ["events"],
        "responses": {
          "200": {
            "description": "List of user specific events",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/secure/games": {
      "get": {
        "security": [
          {
            "Bearer": []
          },
          {
            "Bearer": []
          }
        ],
        "produces": ["application/json", "application/json"],
        "tags": ["games", "games"],
        "responses": {
          "200": {
            "description": "List of games for the current user",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/game.ResponseDto"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/staffs": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["staff"],
        "parameters": [
          {
            "type": "string",
            "example": "\"Coach\"",
            "description": "Role name to filter staff",
            "name": "role",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of staff members retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/staff.ResponseDto"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid parameters",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/staffs/logs": {
      "get": {
        "description": "Retrieves a paginated list of staff activity logs with optional filtering",
        "produces": ["application/json"],
        "tags": ["staff_activity_logs"],
        "summary": "Get staff activity logs",
        "parameters": [
          {
            "type": "string",
            "example": "\"550e8400-e29b-41d4-a716-446655440000\"",
            "description": "Filter by staff member ID (UUID format)",
            "name": "staff_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search term to filter activity descriptions (case-insensitive partial match)",
            "name": "search_description",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 10,
            "description": "Number of records to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "example": 0,
            "description": "Number of records to skip for pagination (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of staff activity logs retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/staff_activity_logs.StaffActivityLogResponse"
              }
            }
          },
          "400": {
            "description": "Bad Request: Invalid input format",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/staffs/{id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["staff"],
        "parameters": [
          {
            "type": "string",
            "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
            "description": "Staff ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Staff details",
            "name": "staff",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/staff.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Staff updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Staff not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["staff"],
        "parameters": [
          {
            "type": "string",
            "example": "\"f47ac10b-58cc-4372-a567-0e02b2c3d479\"",
            "description": "Staff ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Staff deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Staff not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/teams": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["teams"],
        "responses": {
          "200": {
            "description": "Teams retrieved successfully",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/team.Response"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["teams"],
        "parameters": [
          {
            "description": "Team details",
            "name": "team",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/team.RequestDto"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Team created successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/teams/{id}": {
      "get": {
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["teams"],
        "parameters": [
          {
            "type": "string",
            "description": "Team ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Team retrieved successfully",
            "schema": {
              "$ref": "#/definitions/team.Response"
            }
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Team not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["teams"],
        "parameters": [
          {
            "type": "string",
            "description": "Team ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Team details",
            "name": "team",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/team.RequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Team updated successfully"
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Team not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["teams"],
        "parameters": [
          {
            "type": "string",
            "description": "Team ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: Team deleted successfully"
          },
          "400": {
            "description": "Bad Request: Invalid ID",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "404": {
            "description": "Not Found: Team not found",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/users/{id}": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user details",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user.UpdateRequestDto"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content: User updated successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "403": {
            "description": "Forbidden: Unauthorized access",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    },
    "/webhooks/stripe": {
      "post": {
        "description": "- checkout.session.completed: Logs completed checkout sessions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["payments"],
        "parameters": [
          {
            "type": "string",
            "description": "Stripe webhook signature",
            "name": "Stripe-Signature",
            "in": "header",
            "required": true
          },
          {
            "description": "Raw webhook payload",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook processed successfully",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "400": {
            "description": "Bad Request: Invalid input",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          },
          "500": {
            "description": "Internal Server Error: Failed to process webhook event",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        }
      }
    }
  },
  "definitions": {
    "api_internal_domains_playground_dto_session.ResponseDto": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "customer_first_name": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_last_name": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "start_time": {
          "type": "string"
        },
        "system_id": {
          "type": "string"
        },
        "system_name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "api_internal_domains_playground_dto_system.RequestDto": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "api_internal_domains_playground_dto_system.ResponseDto": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "api_internal_domains_team_dto.RosterMemberInfo": {
      "type": "object",
      "properties": {
        "assists": {
          "type": "integer"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "losses": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "points": {
          "type": "integer"
        },
        "rebounds": {
          "type": "integer"
        },
        "steals": {
          "type": "integer"
        },
        "wins": {
          "type": "integer"
        }
      }
    },
    "athlete.ResponseAthlete": {
      "type": "object",
      "properties": {
        "assists": {
          "type": "integer"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "losses": {
          "type": "integer"
        },
        "photo_url": {
          "type": "string"
        },
        "points": {
          "type": "integer"
        },
        "rebounds": {
          "type": "integer"
        },
        "steals": {
          "type": "integer"
        },
        "team_id": {
          "type": "string"
        },
        "wins": {
          "type": "integer"
        }
      }
    },
    "booking.UpcomingBookingsResponse": {
      "type": "object",
      "properties": {
        "haircuts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/haircut_event.EventResponseDto"
          }
        },
        "playground": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_internal_domains_playground_dto_session.ResponseDto"
          }
        }
      }
    },
    "court.RequestDto": {
      "type": "object",
      "required": ["location_id", "name"],
      "properties": {
        "location_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "court.ResponseDto": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "location_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "customer.AthleteRegistrationRequestDto": {
      "type": "object",
      "required": ["dob", "first_name", "last_name"],
      "properties": {
        "country_code": {
          "type": "string"
        },
        "dob": {
          "type": "string",
          "example": "2000-01-01"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": ["M", "F"]
        },
        "has_consent_to_email_marketing": {
          "type": "boolean"
        },
        "has_consent_to_sms": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string",
          "example": "+15141234567"
        },
        "waivers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/customer.WaiverSigningRequestDto"
          }
        }
      }
    },
    "customer.ChildRegistrationRequestDto": {
      "type": "object",
      "required": ["dob", "first_name", "last_name"],
      "properties": {
        "country_code": {
          "type": "string"
        },
        "dob": {
          "type": "string",
          "example": "2000-01-01"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": ["M", "F"]
        },
        "last_name": {
          "type": "string"
        },
        "waivers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/customer.WaiverSigningRequestDto"
          }
        }
      }
    },
    "customer.MembershipHistoryResponse": {
      "type": "object",
      "properties": {
        "membership_benefits": {
          "type": "string"
        },
        "membership_description": {
          "type": "string"
        },
        "membership_name": {
          "type": "string"
        },
        "membership_plan_name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "renewal_date": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "customer.MembershipResponseDto": {
      "type": "object",
      "properties": {
        "membership_name": {
          "type": "string"
        },
        "membership_plan_id": {
          "type": "string"
        },
        "membership_plan_name": {
          "type": "string"
        },
        "membership_renewal_date": {
          "type": "string"
        },
        "membership_start_date": {
          "type": "string"
        }
      }
    },
    "customer.ParentRegistrationRequestDto": {
      "type": "object",
      "required": ["dob", "first_name", "last_name"],
      "properties": {
        "country_code": {
          "type": "string"
        },
        "dob": {
          "type": "string",
          "example": "2000-01-01"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": ["M", "F"]
        },
        "has_consent_to_email_marketing": {
          "type": "boolean"
        },
        "has_consent_to_sms": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string",
          "example": "+15141234567"
        }
      }
    },
    "customer.Response": {
      "type": "object",
      "properties": {
        "country_code": {
          "type": "string"
        },
        "dob": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "hubspot_id": {
          "type": "string"
        },
        "is_archived": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "membership_info": {
          "$ref": "#/definitions/customer.MembershipResponseDto"
        },
        "phone": {
          "type": "string"
        },
        "user_id": {
          "type": "string"
        }
      }
    },
    "customer.StatsUpdateRequestDto": {
      "type": "object",
      "properties": {
        "assists": {
          "type": "integer"
        },
        "losses": {
          "type": "integer"
        },
        "points": {
          "type": "integer"
        },
        "rebounds": {
          "type": "integer"
        },
        "steals": {
          "type": "integer"
        },
        "wins": {
          "type": "integer"
        }
      }
    },
    "customer.WaiverSigningRequestDto": {
      "type": "object",
      "required": ["waiver_url"],
      "properties": {
        "is_waiver_signed": {
          "type": "boolean"
        },
        "waiver_url": {
          "type": "string"
        }
      }
    },
    "dto.ChatRequest": {
      "type": "object",
      "properties": {
        "chat_history": {
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "context": {
          "type": "string"
        },
        "query": {
          "type": "string"
        }
      }
    },
    "dto.ChatResponse": {
      "type": "object",
      "properties": {
        "reply": {
          "type": "string"
        }
      }
    },
    "dto.ContactRequest": {
      "type": "object",
      "required": ["email", "message", "name", "phone", "token"],
      "properties": {
        "email": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "token": {
          "description": "reCAPTCHA token",
          "type": "string"
        }
      }
    },
    "dto.NewsletterRequest": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      }
    },
    "event.CustomerResponseDto": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "has_cancelled_enrollment": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "event.DeleteRequestDto": {
      "type": "object",
      "required": ["ids"],
      "properties": {
        "ids": {
          "type": "array",
          "minItems": 1,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "event.EventRequestDto": {
      "type": "object",
      "required": ["end_at", "start_at"],
      "properties": {
        "court_id": {
          "type": "string",
          "example": "0bab3927-50eb-42b3-9d6b-2350dd00a111"
        },
        "end_at": {
          "type": "string",
          "example": "2023-10-05T07:00:00Z"
        },
        "location_id": {
          "type": "string",
          "example": "0bab3927-50eb-42b3-9d6b-2350dd00a100"
        },
        "program_id": {
          "type": "string",
          "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
        },
        "start_at": {
          "type": "string",
          "example": "2023-10-05T07:00:00Z"
        },
        "team_id": {
          "type": "string",
          "example": "0bab3927-50eb-42b3-9d6b-2350dd00a100"
        }
      }
    },
    "event.EventResponseDto": {
      "type": "object",
      "properties": {
        "capacity": {
          "type": "integer"
        },
        "created_by": {
          "$ref": "#/definitions/event.PersonResponseDto"
        },
        "customers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/event.CustomerResponseDto"
          }
        },
        "end_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/event.LocationInfo"
        },
        "program": {
          "$ref": "#/definitions/event.ProgramInfo"
        },
        "staff": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/event.StaffResponseDto"
          }
        },
        "start_at": {
          "type": "string"
        },
        "team": {
          "$ref": "#/definitions/event.TeamInfo"
        },
        "updated_by": {
          "$ref": "#/definitions/event.PersonResponseDto"
        }
      }
    },
    "event.LocationInfo": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "event.PersonResponseDto": {
      "type": "object",
      "properties": {
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        }
      }
    },
    "event.ProgramInfo": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "event.RecurrenceRequestDto": {
      "type": "object",
      "required": [
        "event_end_at",
        "event_start_at",
        "recurrence_end_at",
        "recurrence_start_at"
      ],
      "properties": {
        "court_id": {
          "type": "string",
          "example": "0bab3927-50eb-42b3-9d6b-2350dd00a100"
        },
        "day": {
          "type": "string",
          "example": "THURSDAY"
        },
        "event_end_at": {
          "type": "string",
          "example": "23:00:00+00:00"
        },
        "event_start_at": {
          "type": "string",
          "example": "23:00:00+00:00"
        },
        "location_id": {
          "type": "string",
          "example": "0bab3927-50eb-42b3-9d6b-2350dd00a100"
        },
        "program_id": {
          "type": "string",
          "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
        },
        "recurrence_end_at": {
          "type": "string",
          "example": "2023-10-05T07:00:00Z"
        },
        "recurrence_start_at": {
          "type": "string",
          "example": "2023-10-05T07:00:00Z"
        },
        "team_id": {
          "type": "string",
          "example": "0bab3927-50eb-42b3-9d6b-2350dd00a100"
        }
      }
    },
    "event.StaffResponseDto": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "role_name": {
          "type": "string"
        }
      }
    },
    "event.TeamInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "game.RequestDto": {
      "type": "object",
      "required": ["away_team_id", "home_team_id", "location_id", "start_time"],
      "properties": {
        "away_score": {
          "description": "Optional score for the away team",
          "type": "integer"
        },
        "away_team_id": {
          "description": "ID of the away team",
          "type": "string"
        },
        "court_id": {
          "description": "ID of the court where the game is played",
          "type": "string"
        },
        "end_time": {
          "description": "Optional end time of the game",
          "type": "string"
        },
        "home_score": {
          "description": "Optional score for the home team",
          "type": "integer"
        },
        "home_team_id": {
          "description": "ID of the home team",
          "type": "string"
        },
        "location_id": {
          "description": "ID of the location where the game is played",
          "type": "string"
        },
        "start_time": {
          "description": "Required start time of the game",
          "type": "string"
        },
        "status": {
          "description": "Game status must be one of the allowed values",
          "type": "string",
          "enum": ["scheduled", "completed", "canceled"]
        }
      }
    },
    "game.ResponseDto": {
      "type": "object",
      "properties": {
        "away_score": {
          "type": "integer"
        },
        "away_team_id": {
          "type": "string"
        },
        "away_team_logo_url": {
          "type": "string"
        },
        "away_team_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "home_score": {
          "type": "integer"
        },
        "home_team_id": {
          "type": "string"
        },
        "home_team_logo_url": {
          "type": "string"
        },
        "home_team_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "location_id": {
          "type": "string"
        },
        "location_name": {
          "type": "string"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "haircut_event.EventResponseDto": {
      "type": "object",
      "properties": {
        "barber_id": {
          "type": "string"
        },
        "barber_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "customer_id": {
          "type": "string"
        },
        "customer_name": {
          "type": "string"
        },
        "end_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "start_at": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "haircut_event.RequestDto": {
      "type": "object",
      "required": ["begin_time", "end_time", "service_name"],
      "properties": {
        "barber_id": {
          "type": "string",
          "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
        },
        "begin_time": {
          "type": "string",
          "example": "2023-10-05T07:00:00Z"
        },
        "end_time": {
          "type": "string",
          "example": "2023-10-05T07:00:00Z"
        },
        "service_name": {
          "type": "string",
          "example": "Haircut"
        }
      }
    },
    "haircut_service.BarberServiceResponseDto": {
      "type": "object",
      "properties": {
        "barber_id": {
          "type": "string"
        },
        "barber_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "haircut_id": {
          "type": "string"
        },
        "haircut_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "haircut_service.CreateBarberServiceRequestDto": {
      "type": "object",
      "properties": {
        "barber_id": {
          "type": "string",
          "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
        },
        "haircut_service_id": {
          "type": "string",
          "example": "f0e21457-75d4-4de6-b765-5ee13221fd72"
        }
      }
    },
    "identity.AthleteResponseDto": {
      "type": "object",
      "properties": {
        "assists": {
          "type": "integer"
        },
        "losses": {
          "type": "integer"
        },
        "points": {
          "type": "integer"
        },
        "rebounds": {
          "type": "integer"
        },
        "steals": {
          "type": "integer"
        },
        "wins": {
          "type": "integer"
        }
      }
    },
    "identity.MembershipReadResponseDto": {
      "type": "object",
      "properties": {
        "membership_benefits": {
          "type": "string"
        },
        "membership_description": {
          "type": "string"
        },
        "membership_name": {
          "type": "string"
        },
        "plan_name": {
          "type": "string"
        },
        "renewal_date": {
          "type": "string"
        },
        "start_date": {
          "type": "string"
        }
      }
    },
    "identity.UserAuthenticationResponseDto": {
      "type": "object",
      "properties": {
        "age": {
          "type": "string"
        },
        "athlete_info": {
          "$ref": "#/definitions/identity.AthleteResponseDto"
        },
        "country_code": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active_staff": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "membership_info": {
          "$ref": "#/definitions/identity.MembershipReadResponseDto"
        },
        "phone": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "location.RequestDto": {
      "type": "object",
      "required": ["address", "name"],
      "properties": {
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "location.ResponseDto": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "membership.RequestDto": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "description": {
          "type": "string",
          "example": "Access to all premium features"
        },
        "name": {
          "type": "string",
          "example": "Premium Membership"
        }
      }
    },
    "membership.Response": {
      "type": "object",
      "properties": {
        "benefits": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "membership_plan.PlanRequestDto": {
      "type": "object",
      "required": ["membership_id", "stripe_price_id"],
      "properties": {
        "amt_periods": {
          "type": "integer"
        },
        "membership_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "stripe_joining_fees_id": {
          "type": "string"
        },
        "stripe_price_id": {
          "type": "string"
        }
      }
    },
    "membership_plan.PlanResponse": {
      "type": "object",
      "properties": {
        "amt_periods": {
          "type": "integer"
        },
        "created_at": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "interval": {
          "type": "string"
        },
        "membership_id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "price": {
          "type": "string"
        },
        "stripe_joining_fees_id": {
          "type": "string"
        },
        "stripe_price_id": {
          "type": "string"
        },
        "unit_amount": {
          "type": "integer"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "payment.CheckoutResponseDto": {
      "type": "object",
      "properties": {
        "payment_url": {
          "type": "string"
        }
      }
    },
    "practice.RecurrenceRequestDto": {
      "type": "object",
      "required": [
        "court_id",
        "location_id",
        "practice_end_at",
        "practice_start_at",
        "recurrence_end_at",
        "recurrence_start_at",
        "team_id"
      ],
      "properties": {
        "court_id": {
          "type": "string"
        },
        "day": {
          "type": "string"
        },
        "location_id": {
          "type": "string"
        },
        "practice_end_at": {
          "type": "string"
        },
        "practice_start_at": {
          "type": "string"
        },
        "recurrence_end_at": {
          "type": "string"
        },
        "recurrence_start_at": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["scheduled", "completed", "canceled"]
        },
        "team_id": {
          "type": "string"
        }
      }
    },
    "practice.RequestDto": {
      "type": "object",
      "required": ["court_id", "location_id", "start_time", "team_id"],
      "properties": {
        "court_id": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "location_id": {
          "type": "string"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": ["scheduled", "completed", "canceled"]
        },
        "team_id": {
          "type": "string"
        }
      }
    },
    "practice.ResponseDto": {
      "type": "object",
      "properties": {
        "court_id": {
          "type": "string"
        },
        "court_name": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "end_time": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "location_id": {
          "type": "string"
        },
        "location_name": {
          "type": "string"
        },
        "start_time": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "team_id": {
          "type": "string"
        },
        "team_logo_url": {
          "type": "string"
        },
        "team_name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "program.LevelsResponse": {
      "type": "object",
      "properties": {
        "levels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "program.RequestDto": {
      "type": "object",
      "required": ["level", "name", "type"],
      "properties": {
        "capacity": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "program.Response": {
      "type": "object",
      "properties": {
        "capacity": {
          "type": "integer"
        },
        "created_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "staff.CoachStatsResponseDto": {
      "type": "object",
      "properties": {
        "losses": {
          "type": "integer"
        },
        "wins": {
          "type": "integer"
        }
      }
    },
    "staff.PendingStaffResponseDto": {
      "type": "object",
      "properties": {
        "country_code": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "dob": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "role_id": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "staff.RegistrationRequestDto": {
      "type": "object",
      "required": ["dob", "first_name", "last_name", "role"],
      "properties": {
        "country_code": {
          "type": "string"
        },
        "dob": {
          "type": "string",
          "example": "2000-01-01"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": ["M", "F"]
        },
        "is_active_staff": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "phone_number": {
          "type": "string",
          "example": "+15141234567"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "staff.RequestDto": {
      "type": "object",
      "required": ["is_active", "role_name"],
      "properties": {
        "is_active": {
          "type": "boolean"
        },
        "role_name": {
          "type": "string"
        }
      }
    },
    "staff.ResponseDto": {
      "type": "object",
      "properties": {
        "coach_stats": {
          "$ref": "#/definitions/staff.CoachStatsResponseDto"
        },
        "country_code": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "hubspot_id": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "is_active": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "photo_url": {
          "type": "string"
        },
        "role_name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "staff_activity_logs.StaffActivityLogResponse": {
      "type": "object",
      "properties": {
        "activity_description": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "staff_id": {
          "type": "string"
        }
      }
    },
    "team.Coach": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "team.RequestDto": {
      "type": "object",
      "required": ["capacity", "name"],
      "properties": {
        "capacity": {
          "type": "integer"
        },
        "coach_id": {
          "type": "string",
          "example": "faae4b3a-ad9f-463c-ae4b-3aad9fb63c9b"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "team.Response": {
      "type": "object",
      "properties": {
        "capacity": {
          "type": "integer"
        },
        "coach": {
          "$ref": "#/definitions/team.Coach"
        },
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "roster": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_internal_domains_team_dto.RosterMemberInfo"
          }
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "user.UpdateRequestDto": {
      "type": "object",
      "required": [
        "country_alpha2_code",
        "dob",
        "first_name",
        "has_marketing_email_consent",
        "has_sms_consent",
        "last_name"
      ],
      "properties": {
        "country_alpha2_code": {
          "type": "string",
          "example": "US"
        },
        "dob": {
          "type": "string",
          "example": "2000-01-01"
        },
        "email": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": ["M", "F"]
        },
        "has_marketing_email_consent": {
          "type": "boolean"
        },
        "has_sms_consent": {
          "type": "boolean"
        },
        "last_name": {
          "type": "string"
        },
        "parent_id": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
